+-------------+
| python venv |
+-------------+

conda deactivate (in case of an existing conda venv)
python3 -m venv appvenv
source appvenv/bin/activate
pip freeze > requirements.txt
deactivate

+-----------------------+
| python module running |
+-----------------------+

$ python3 -m folder.filename (without the .py)


+-----+
| NLP |
+-----+

What is a corpus, and how is it used in NLP?
https://medium.com/@BAVL/what-is-a-corpus-and-how-is-it-used-in-nlp-dfd420cbc233

CountVectorizer vs TfidfVectorizer
https://www.kaggle.com/code/zeeshanlatif/countvectorizer-vs-tfidfvectorizer

Python | Lemmatization with NLTK
https://www.geeksforgeeks.org/python-lemmatization-with-nltk/

Python – Lemmatization Approaches with Examples
https://www.geeksforgeeks.org/python-lemmatization-approaches-with-examples/

Stemming and Lemmatization in Python
https://www.datacamp.com/tutorial/stemming-lemmatization-python



+------+
| BEIR |
+------+

BEIR (Benchmarking IR) consists of a homogenous benchmark for diverse sentence or passage level IR tasks. 
It provides a common and easy framework for the cross-domain evaluation of your retrieval models.
https://huggingface.co/BeIR
https://huggingface.co/datasets/BeIR/scidocs
https://huggingface.co/datasets/BeIR/scidocs-generated-queries
https://huggingface.co/datasets/BeIR/scidocs-qrels

An Introduction to Text Pre-processing and Vectorization with Python
https://medium.com/data-insight/an-introduction-to-text-pre-processing-and-vectorization-with-python-1a2c8f150d35


+-------+
| arXiv |
+-------+

arXiv: Η ελεύθερη πύλη της επιστημονικής γνώσης
https://edu.ellak.gr/2025/03/28/arxiv-i-eleftheri-pili-tis-epistimonikis-gnosis/

Terms of Use for arXiv APIs
https://info.arxiv.org/help/api/tou.html
# (...)
# When using the legacy APIs (including OAI-PMH, RSS, and the arXiv API),
# make no more than one request every three seconds, and limit requests to a single connection at a time.
# These limits may change in the future.
# (...)

arXiv API User's Manual
https://info.arxiv.org/help/api/user-manual.html
# (...)
# the titles of an article can be searched, as well as the author list, abstracts, comments and journal reference. 
# To search one of these fields, we simply prepend the field prefix followed by a colon to our search term. 
# For example, suppose we wanted to find all articles by the author Adrian Del Maestro. 
# We could construct the following query http://export.arxiv.org/api/query?search_query=au:del_maestro
# This returns nine results. The following table lists the field prefixes for all the fields that can be searched.
# prefix explanation
# ti	 Title
# au	 Author
# abs	 Abstract
# co	 Comment
# jr	 Journal Reference
# cat	 Subject Category
# rn	 Report Number
# id	 Id (use id_list instead)
# all	 All of the above
# (...)
# The API provides one date filter, submittedDate, that allow you to select data within a given date range of when the data was submitted to arXiv. 
# The expected format is [YYYYMMDDTTTT+TO+YYYYMMDDTTTT] were the TTTT is provided in 24 hour time to the minute, in GMT. 
# We could construct the following query using submittedDate.
# https://export.arxiv.org/api/query?search_query=au:del_maestro+AND+submittedDate:[202301010600+TO+202401010600]
# (...)


+-----+
| XML |
+-----+

How to Parse XML in Python
https://scrapingant.com/blog/python-parse-xml



+-------+
| regex |
+-------+

Regex Cheat Sheet – Python
https://www.geeksforgeeks.org/python-regex-cheat-sheet/

Online helpers
http://www.pyregex.com/
https://regex101.com/

regex: \"(.*?)\"
to get all content in delimiters
? -> as few as possible

Python Tutorial: re Module - How to Write and Match Regular Expressions (Regex)
https://www.youtube.com/watch?v=K8L6KVGG-7o
#
# metacharacters need to be escaped: . ^ $ * + ? { } [ ] \ | ( )
#
# .     - Any character except new line
# \d    - Digit (0-9)
# \D    - Not a Digit
# \w    - Word Character (a-z, A-Z, 0-9, _)
# \W    - Not a Word Character
# \s    - Whitespace (space, tab, newline)
# \S    - Not Whitespace
#
# \b    - Word Boundary
# \B    - Not a word Boundary
# ^     - Beginning of string
# $     - End of string
#
# []    - Matches characters in brackets
# [^]   - Matches characters NOT in brackets
# |     - Either or
# ()    - Group
#
# *     - 0 or more
# +     - 1 or more
# ?     - 0 or 1
# {3}   - Exact number
# {3,5} - Range (min,max)

